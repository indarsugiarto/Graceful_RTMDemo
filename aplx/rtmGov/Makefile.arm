OBJECTS = $(BUILD_DIR)profiler_cpuload_isr.o
THUMB := 0
#include $(SPINN_DIRS)/make/app.make

# Common includes for making SpiNNaker binaries

# Set to 1 for GNU tools, 0 for ARM
GNU := 1

# Set to 1 if using SARK/API (0 for SARK)
API := 1

# Set to 1 to make Thumb code (0 for ARM)
THUMB := 0

# Set to 1 to include debug info in ELF file
DEBUG := 1

# Set to 1 if making a library (advanced!)
LIB := 0

# Prefix for GNU tool binaries
GP := arm-none-eabi

# If SPINN_DIRS is not defined, this is an error!
ifndef SPINN_DIRS
    $(error SPINN_DIRS is not set.  Please define SPINN_DIRS (possibly by running "source setup" in the spinnaker tools folder))
endif

ifndef BUILD_DIR
    ifeq ($(GNU),1)
        BUILD_DIR := build/gnu/
    else
        BUILD_DIR := build/arm/
    endif
endif

ifeq ($(DEBUG),1)
.SECONDARY: $(BUILD_DIR)$(APP).elf
endif

SPINN_LIB_DIR = $(SPINN_DIRS)/lib
SPINN_INC_DIR = $(SPINN_DIRS)/include
SPINN_TOOLS_DIR = $(SPINN_DIRS)/tools
SPINN_MAKE_LIB_DIR = $(SPINN_DIRS)/make

# ------------------------------------------------------------------------------
# Tools

ifeq ($(GNU),1)

    # GNU Compiler (gcc) settings
    AS := $(GP)-as --defsym GNU=1 -mthumb-interwork -march=armv5te
    CC_NO_THUMB  := $(GP)-gcc -c -mthumb-interwork -march=armv5te -std=gnu99 -I $(SPINN_INC_DIR)
    CXX_NO_THUMB := $(GP)-gcc -c -mthumb-interwork -march=armv5te -std=c++11 -I $(SPINN_INC_DIR) -fno-rtti -fno-exceptions
    CC_THUMB  := $(CC_NO_THUMB) -mthumb -DTHUMB
    CXX_THUMB := $(CXX_NO_THUMB) -mthumb -DTHUMB
    
    OSPACE := -Os
    OTIME := -Ofast
    
    ifeq ($(LIB), 1)
        CFLAGS += -fdata-sections -ffunction-sections
        LD := $(GP)-ld -i
    else
        LD := $(GP)-gcc -T$(SPINN_TOOLS_DIR)/sark.lnk -Wl,-e,cpu_reset -Wl,-static -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,--use-blx -nostartfiles -static
        LFLAGS += -L $(SPINN_LIB_DIR)
    endif
    
    AR := $(GP)-ar -rcs
    OC := $(GP)-objcopy
    OD := $(GP)-objdump -dxt >
    NM := $(GP)-nm
    SPINN_LIBS += $(SPINN_LIB_DIR)/libspin1_api.a

else
    # ARM Compiler settings
    AS := armasm --keep --cpu=5te --apcs interwork
    CC_NO_THUMB := armcc -c --c99 --cpu=5te --apcs interwork --min_array_alignment=4 -I $(SPINN_INC_DIR)
    CXX_NO_THUMB := armcc -c --cpp11 --cpu=5te --apcs interwork --min_array_alignment=4 -I $(SPINN_INC_DIR) --no_rtti --no_exceptions
    CC_THUMB := $(CC_NO_THUMB) --thumb -DTHUMB
    CXX_THUMB := $(CXX_NO_THUMB) --thumb -DTHUMB
    
    OSPACE := -Ospace
    OTIME := -Otime
    
    ifeq ($(LIB), 1)
        CFLAGS += --split_sections
        LD := armlink --partial
    else
        LD = armlink --scatter=$(SPINN_TOOLS_DIR)/sark.sct --remove --entry cpu_reset
    endif
    
    AR := armar -rsc
    OC := fromelf
    OD := fromelf -cds --output
    NM := nm
    SPINN_LIBS += $(SPINN_LIB_DIR)/spin1_api.a
endif

RM := rm -f
RMDIR := rmdir
CAT := cat
LS := ls -l
MKDIR := mkdir -p
CP := cp
MV := mv

ifeq ($(THUMB),1)
  CC := $(CC_THUMB)
  CXX := $(CXX_THUMB)
else
  CC := $(CC_NO_THUMB)
  CXX := $(CXX_NO_THUMB)
endif

ifeq ($(DEBUG),1)
  CFLAGS += -g
  AFLAGS += -g
endif


$(OBJECTS): profiler_cpuload_isr.c
	$(MKDIR) $(BUILD_DIR)
	$(CC) $(CFLAGS) -o $@ $<

clean:
	$(RM) $(OBJECTS) $(BUILD_DIR)$(APP).txt $(APP_OUTPUT_DIR)$(APP).aplx $(BUILD_DIR)$(APP).elf
